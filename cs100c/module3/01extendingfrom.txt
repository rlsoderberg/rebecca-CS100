CHECKPOINT 1



1.

SELECT e.`first name`, e.`last name`, o.`ship city` 

FROM employees e, orders o 

WHERE e.`id` = o.`employee id` and o.`ship state/province` = 'CA';

it wanted me to put back quotes around id. i thought i would get away with no quotes on that one!!

does it ALWAYS want back quotes on attributes?



2. 

SELECT e.`first name`, e.`last name`, o.`ship city` 

FROM employees e join orders o on e.`id` = o.`employee id`

WHERE o.`ship state/province` = 'CA';



3.

well... it sure felt good converting style 1 to style 2... 

but honestly, style 1 feels simpler to me. maybe because i'm more used to it.

simple things every day (sing it zero 7!!!)



4. 

SELECT c.`first name`, c.`last name`, o.`ship city` 

FROM `orders` o join `customers` c on c.`id` = o.`customer id` 

WHERE `Ship State/Province` = 'CA';



SELECT e.`first name`, e.`last name`, c.`first name`, c.`last name`, o.`ship city` 

FROM `orders` o join `employees` e join `customers` c 

WHERE `Ship State/Province` = 'CA';

well... i've got to admit, i'm kind of coming around to the join. it kind of makes more sense.

putting the equality between the tables in where always felt a little weird to me.



CHECKPOINT 2

orders:
order id

order details:
order id
product id
quantity
inventory id

products:
id
category

1. 

SELECT o.`shipping fee`FROM order o right outer join products on ... WHERE p.`category` = 'sauce'
so... what you want left over is unordered sauces
so you want one side to have a list of product ids for all sauces
and you want the other side to have the product ids of the sauces that are ordered?

SELECT od.`quantity` FROM `order details` od right outer join products p on od.`product id` = p.`id` WHERE p.`category` = 'sauce';

is p.`id` the wrong attribute?
i don't know what else to use!!!
i'll come back to this later 

OH I WAS USING THE WRONG VALUE 'SAUCE' INSTEAD OF 'SAUCES'

SELECT p.`product name`, od.`quantity` FROM `order details` od right outer join products p on od.`product id` = p.`id` WHERE p.`category` = 'sauces';
(by the way, i'm also including product name on these, just to make sure i did them right)

2. 

SELECT p.`product name`, od.`quantity`, o.`paid date` FROM (`order details` od right outer join products p on od.`product id` = p.`id`) join orders o WHERE p.`category` = 'sauces';
Well, I got a table that is way longer than 1. Does that make sense?
I think so, because whatever tables you were using in 1, are just lost in there among all the orders, right?

3. 

I'm assuming we're still dealing with just sauces?
SELECT p.`product name`, o.`ship city`, o.`ship state/province`, s.`company` FROM (((orders o join `order details` od on od.`order id` = o.`order id`) left outer join products p on od.`product id` = p.`id`) right outer join shippers s on o.`shipper id` = s.`id`) WHERE p.`category` = 'sauces';
I almost forgot to do the outer joins ON something!!

Also... I'm looking for shippers who haven't shipped anything! 
I'm not SUPER sure I'm ordering these joins correctly.
Oh right, so... shippers is currently kind of on the inside, so maybe I need to move it to the outside?

4. 

SELECT p.`product name`, o.`ship city`, o.`ship state/province`, concat(e.`first name`, ' ', e.`last name`) as 'Employee Name' FROM (((orders o join `order details` od on od.`order id` = o.`order id`) left outer join products p on od.`product id` = p.`id`) right outer join employees e on o.`employee id` = e.`id`) WHERE p.`category` = 'sauces';

CHECKPOINT 3

1.

SELECT e.`last name`, o.`ship city`, o.`ship state/province` FROM orders o left outer join employees e on o.`employee id` = e.`id` WHERE o.`employee id` in (select `id` from employees where `last name` like 'C%');
well, A) it didn't like when i labeled things in the subquery with the e prefix
B) it didn't like when i was asking it for e.`last name` outside the subquery
like, what!! i wanted to make sure the last names started with C!!

the solution seemed to be joining orders and employees...

2.

SELECT p.`product name`, o.`ship city`, o.`ship state/province` FROM (orders o left outer join `order details` od on o.`order id` = od.`order id`) right outer join products p on p.`id` = od.`product id` WHERE od.`product id` in (select `id` from products where `product name` like '%dried%');
so... i A)... well... i mainly needed to get the order of the joins right, i guess

3. 

SELECT p.`product name`, od.`order id` FROM (`order details` od join orders o) right outer join products p on p.`id` = od.`product id` WHERE p.`id` not in (select `product id` from `order details`);
there, i think that looks nice. so, well, it basically came down to the order of the joins again
but i also needed to get the subquery right???

4. 

SELECT DISTINCT o.`ship state/province`, o.`order date`, p.`category`, od. `purchase order id`
FROM (products p right outer join 
		(orders o right outer join `order details` od on od.`order id` = o.`order id`)
			on p.`id` = od.`product id`)
				right outer join `purchase orders` po on po.`purchase order id` = od.`purchase order id`
WHERE po.`purchase order id` in 
	(select `purchase order id` from `order details` where `product id` in 
		(select `id` from products where `category` = 'beverages'));

i woke up and thought, this must be the answer! use purchase order ids!
well... it's giving me an empty set...

ohhhh, i was using not in, instead of in.
still, that's a lot of beverages, i need to limit it to one result per purchase order id

well, it took like 5 minutes to execute, and it's a ton of beverages again
i am rewriting my joins 

well, now it's executing immediately, at least
can confirm that changing the first two right outer joins to inner joins is what slows it down

i changed WHERE od.`purchase order id` to WHERE po.`purchase order id`, and i was hoping that would fix it
still giving repeat purchase order ids though!!!

well, i can always select distinct, and that kind of fixes it
although i hate to be relying on that
and this is clearly not right
look at this table!!! there are duplicate purchase order ids, separated by date format... 








