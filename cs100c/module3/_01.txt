Advanced SQL: Checkpoint
1. 
select E.`First name`, E.`Last name`
from employees E, orders O 
where O.`Employee ID` = E.`ID` and O.`Ship State/Province` = 'CA';

2. 
select concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`, O.`Ship City`
from employees E join orders O on E.ID = O.`Employee ID`
where O.`Ship State/Province` = 'CA';

3.
Well, I'm still not really used to messing with from that much. But it does feel nice.
Although, honestly, doing multiple joins like on 5 made me a little nervous.

4. 
Original:
select C.`First Name`, C.`Last Name`, O.`Ship City`
from customers C, orders O 
where O.`Customer ID` = C.`ID` and O.`Ship State/Province` = 'CA';
Join Version:
select C.`First Name`, C.`Last Name`, O.`Ship City`
from customers C join orders O on O.`Customer ID` = C.`ID`
where O.`Ship State/Province` = 'CA';

5.
Original:
select concat(C.`First Name`, ' ', C.`Last Name`) as `Customer Name`, concat(E.`First name`, ' ', E.`Last name`) as `Employee Name`, O.`Ship City` as `Order Ship City`
from customers C, orders O, employees E
where O.`Customer ID` = C.`ID` and O.`Employee ID` = E.`ID` and O.`Ship State/Province` = 'CA';
Join Version:
select concat(C.`First Name`, ' ', C.`Last Name`) as `Customer Name`, concat(E.`First name`, ' ', E.`Last name`) as `Employee Name`, O.`Ship City`
from customers C join orders O on O.`Customer ID` = C.`ID` join employees E on O.`Employee ID` = E.`ID`
where O.`Ship State/Province` = 'CA';

From extensions: Checkpoint
1.
select OD.Quantity, P.`Product Name`, O.`Order Date`
from `Order Details` OD join products P on OD.`Product ID` = P.`ID` left outer join Orders O on O.`Order ID` = OD.`Order ID`
where P.Category = 'Sauces';

Well... I was looking out for sauces that had never been ordered!!! 
I can't tell if I did that right, or if there are any of those!

2. See 1

3. 
#
    select O.`Ship City`, O.`Ship State/Province`, S.Company, count(S.Company) as `ships per company`
    from orders O right outer join shippers S on O.`shipper id`= S.id
    group by S.Company;
#

select O.`Ship City`, O.`Ship State/Province`, S.Company
from orders O right outer join shippers S on O.`shipper id`= S.id;

OK I tried doing group by but it's not quite working!!!
let me see if i can find it in further units...
oh, there's more in the same unit!!!
see, let me just wait a little before trying to do this...
like, i'm pretty sure i'm doing it wrong? counting and grouping by the same column? not sure how do it yet

4. ?????
#
    select O.`Ship City`, O.`Ship State/Province`, concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`, count(E.`Last Name`) as `ships per employee`
    from orders O right outer join employees E on O.`Employee ID` = E.ID
    group by E.`Last Name`;

#
select O.`Ship City`, O.`Ship State/Province`, concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`
from orders O right outer join employees E on O.`Employee ID` = E.ID;

Where extensions: Checkpoint

1. For employees whose last name starts with "C", list the ship cities and states they have placed orders for. 
Use a sub query to find employees with a last name starting with C

select O.`Ship City`, O.`Ship State/Province`, concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`
from employees E join orders O on E.`ID` = O.`Employee ID`
where E.`Last Name` like 'C%'; 

2. For products that have "dried" in the name, find the order ship city and state. 
You'll need to join Products, Orders, and Order Details for this one. 
Again, use a subquery to find the right products.

select P.`Product Name`, O.`Ship City`, O.`Ship State/Province`
from products P left outer join (`order details` OD right outer join orders O on O.`Order ID` = OD.`Order ID`) on P.ID = OD.`Product ID`
where P.`Product Name` like '%dried%'; 

I had to check this against my previous version, turns out you don't need the parentheses at the very beginning
But I think it's a little less confusing that way
My problem was I forgot some backticks............

3. Find all the products that are not in the set of products that have been ordered. 
(Note, this could also be written as an outer join. Try it here using the not in syntax.)

select P.`Product Name`
from products P
where P.ID not in (select OD.`Product ID` from `Order Details` OD);

4. Find shipping state and order date for orders that have at least one product in the Beverages category. 
Hint, I think a subquery in the where clause will help.

select o.`ship state/province`, o.`order date`, p.`category`
from products p right outer join (orders o left outer join `order details` od on od.`order id` = o.`order id`) on p.id = od.`product id`
where od.`product id` in (select p.id from products p where category = 'beverages');

now, with this one, i'm totally looking at my previous version
like... a subquery in the where clause???
oh, it was actually just a simple in subquery that i needed

orderby/grouby/having Checkpoint
 
oh!!! i didn't get that the group by keyword is used to get selection group

so, for FROM 3 and 4...

3. Find all the orders that were shipped to California. 
Get the first and last name of the customer and the shipping city for each order.

select O.`Ship City`, O.`Ship State/Province`, S.Company, count(O.`Order ID`) as `ships per company`
from orders O join shippers S on O.`shipper id`= S.id
group by O.`Shipper ID`;

>>1>it's complaining about a nonaggregated column!!! wat is this?
it looks like it's ONLY_FULL_GROUP_BY
should i disable that???
yeah, i wanted to try it on mariadb and see if i had the same issue, but i'm generally pretty clueless
well, let me try disabling it with this thing
SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode, 'ONLY_FULL_GROUP_BY', ''));
oops, i'm still getting the exact same error

4. Once more, find all the orders that were shipped to California. 
Get the first and last name of the customer, the first and last name of the employee, 
and the shipping city for each order.

select O.`Ship City`, concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`, count(O.`Order ID`) as `ships per employee`
from orders O right outer join employees E on O.`Employee ID` = E.ID
group by O.`Employee id`;

maybe the problem with both of these is that i am trying to select attributes from outside the grouped table
so like, how do you put a thing together like that?
whoa, look at that last example, that looks pretty compound...

select O.`Ship City`, O.`Ship State/Province`, S.Company
from orders O, shippers s, (select O.`Order ID`, count(*) as numberitems
				            from orders o
				            group by O.`Ship State/Province`) T
where O.`order id`=T.`order id`;

>>2>ONLY_FULL_GROUP_BY error!

anyway...

1. Find how many shipments have been made to each state. Order the results by state.

wait, for 1, it looks like that is a thing where you would use count? but count is not taught?
i'm not even sure if i'm doing count right??? or is there a better way to do it?
aha!!! examples from class are the key!!!
i should TOTALLY look at examples more often...

select o.`ship state/province`, count(o.`order id`) as 'ships per state'
from orders o
group by o.`ship state/province`;

2. Find how many shipments each employee has made, but only show the employees with more than 4 shipments, 
and order the data from highest count to lowest

select concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`, count(O.`Order ID`) as `ships per employee`
from orders o join employees e on o.`employee id` = e.id
group by o.`employee id`
order by `ships per employee` desc, E.`Last Name`;

>>3>ONLY_FULL_GROUP_BY error!!

3. Show the number of items in each order, sorted by order date desc

select o.`order date`, count(od.`product id`) as `items in order`
from products p join (`order details` od join orders o on od.`order id` = o.`order id`) on p.id = od.`product id`
group by od.`order id`
order by o.`order date` desc, p.`product name`;

>>4>ONLY_FULL_GROUP_BY error!!!

4. Show the number of items in orders placed on each order date, sorted by order date desc

select o.`order date`, count(od.`order id`) as `items in orders per order date`
from `order details` od join orders o on od.`order id` = o.`order id`
group by o.`order date`
order by o.`order date` desc;

this one could be actually right...

wrapping it up

1. Look up the syntax for an update statement, 
and execute a query that changes someone's first name in the database.

update employees e
set e.`first name` = 'Drew'
WHERE e.`first name` = 'Nancy' ;

2. Look up the syntax to create a table in SQL, 
and write SQL scripts to create your own tables in a database.

create table ships (`ship id` int (5), `home port` varchar(25), `launch date` varchar(25));

3. Find the max list price for each category of products, ordered by category

select p.category, max(p.`list price`) as `max list price`
from products p
group by p.category;

4. Find the highest, lowest, and average profit margin (list price-standard price) 
for each category of products, ordered by average profit margin

alter table products add `profit margin` as (`list price` - `standard cost`);

>>5>i keep getting a syntax error!!! i don't think i'm missing any back quotes!!!
supposing this was actually working, then i would go...
well, i'm not quite sure how to put max and min on the same table as an ordered list

select p.`profit margin`, max(`profit margin`), min(`profit margin`)
from products p
order by p.`profit margin` asc;

a different kind of ONLY_FULL_GROUP_BY error!!!!

5. List all the employees names who placed more than one order in New York, ordered by last name

select concat(E.`First Name`, ' ', E.`Last Name`) as `Employee Name`
from employees e join orders o on e.`id` = o.`employee id`, (select count(o.`order id`) as employeeOrders
                                                                from orders o
                                                                group by o.`employee id`) X
where o.`ship state/province` = 'NY', X > 1
order by E.`Last Name`;

>>6>this time it doesn't like my syntax near X > 1



